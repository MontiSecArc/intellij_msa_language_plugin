/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package de.monticore.lang.montisecarc;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static de.monticore.lang.montisecarc.psi.MSACompositeElementTypes.*;
import static de.monticore.lang.montisecarc.psi.MSATokenElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>MSALexer.flex</tt>
 */
public class MSALexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\76\1\36\1\55\1\100\1\1\1\57\1\16\1\101\1\76\1\36\1\13\1\102\1"+
    "\57\1\103\1\16\1\42\1\104\1\105\1\13\1\106\1\107\3\1\1\25\2\13\1\110\1\107"+
    "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\67\3\1\1\117\1\13\1\120\1\1"+
    "\1\121\7\1\2\13\1\30\1\103\1\1\1\122\1\123\1\124\1\125\1\1\2\13\1\126\2\13"+
    "\1\127\24\13\1\130\1\131\2\13\1\130\2\13\1\132\1\133\1\14\3\13\1\133\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\134\1\25\45\13\1\135\1\13\1\25\1\30\4\13\1\30\1"+
    "\136\1\137\1\16\1\13\1\16\1\13\1\16\1\137\1\67\3\13\1\140\1\1\1\141\4\1\5"+
    "\13\1\27\2\13\1\142\4\13\1\40\1\13\1\143\3\1\1\13\1\144\1\47\2\13\1\145\1"+
    "\13\1\75\3\1\1\13\1\107\3\13\1\47\4\1\1\146\5\1\1\104\2\13\1\140\1\147\3\1"+
    "\1\150\1\13\1\151\1\42\2\13\1\40\1\1\2\13\1\140\1\1\1\37\1\42\1\13\1\144\6"+
    "\1\1\152\1\153\14\13\4\1\21\13\1\134\2\13\1\134\1\154\1\13\1\144\3\13\1\155"+
    "\1\156\1\157\1\120\1\156\2\1\1\160\4\1\1\161\1\1\1\120\6\1\1\162\1\163\1\164"+
    "\1\165\1\166\3\1\1\167\147\1\2\13\1\143\2\13\1\143\10\13\1\170\1\171\2\13"+
    "\1\126\3\13\1\172\1\1\1\13\1\107\4\173\4\1\1\103\35\1\1\174\2\1\1\175\1\25"+
    "\4\13\1\176\1\25\4\13\1\127\1\104\1\13\1\144\1\25\4\13\1\143\1\1\1\13\1\30"+
    "\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\120\4\1\2\13\1\144"+
    "\20\13\1\120\1\13\1\177\1\1\2\13\1\143\1\103\1\13\1\144\4\13\1\40\2\1\1\200"+
    "\1\201\5\13\1\202\1\13\1\144\1\27\3\1\1\200\1\203\1\13\1\31\1\1\3\13\1\140"+
    "\1\201\2\13\1\140\3\1\1\204\1\42\1\13\1\40\1\13\1\107\1\1\1\13\1\120\1\50"+
    "\2\13\1\31\1\103\1\1\1\205\1\206\2\13\1\46\1\1\1\207\1\1\1\13\1\210\3\13\1"+
    "\211\1\212\1\213\1\30\1\64\1\214\1\215\1\173\2\13\1\127\1\40\7\13\1\31\1\1"+
    "\72\13\1\140\1\13\1\216\2\13\1\145\20\1\26\13\1\144\6\13\1\75\2\1\1\107\1"+
    "\217\1\55\1\220\1\221\6\13\1\16\1\1\1\150\25\13\1\144\1\1\4\13\1\201\2\13"+
    "\1\27\2\1\1\145\7\1\1\205\7\13\1\120\2\1\1\25\1\30\1\25\1\30\1\222\4\13\1"+
    "\143\1\223\1\224\2\1\1\225\1\13\1\14\1\226\2\144\2\1\7\13\1\30\30\1\1\13\1"+
    "\120\3\13\1\67\2\1\2\13\1\1\1\13\1\227\2\13\1\40\1\13\1\144\2\13\1\230\3\1"+
    "\11\13\1\144\6\1\2\13\1\27\3\13\1\140\11\1\23\13\1\107\1\13\1\40\1\27\11\1"+
    "\1\231\2\13\1\232\1\13\1\40\1\13\1\107\1\13\1\143\4\1\1\13\1\233\1\13\1\40"+
    "\1\13\1\75\4\1\3\13\1\234\4\1\1\67\1\235\1\13\1\140\2\1\1\13\1\120\1\13\1"+
    "\120\2\1\1\117\1\13\1\47\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4"+
    "\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\150\2\13\1\27\4\1\1\150\2\13\2\1\1"+
    "\13\1\46\1\1\1\150\1\13\1\107\2\1\2\13\1\236\1\150\2\13\1\31\1\237\1\240\2"+
    "\1\1\13\1\22\1\145\5\1\1\241\1\242\1\46\2\13\1\143\2\1\1\71\1\54\1\55\1\66"+
    "\1\1\1\243\1\16\21\1\3\13\1\1\1\244\13\1\2\13\1\143\2\1\1\245\2\1\3\13\1\1"+
    "\1\246\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\103\34\1\3\13\1\46\20\1"+
    "\71\13\1\75\16\1\14\13\1\140\53\1\2\13\1\143\75\1\44\13\1\107\33\1\43\13\1"+
    "\46\1\13\1\143\7\1\1\13\1\144\1\1\3\13\1\1\1\140\1\1\1\150\1\247\1\13\67\1"+
    "\4\13\1\47\1\67\3\1\1\150\6\1\1\16\77\1\6\13\1\30\1\120\1\46\1\75\66\1\5\13"+
    "\1\205\3\13\1\137\1\250\1\251\1\252\3\13\1\253\1\254\1\13\1\255\1\256\1\36"+
    "\24\13\1\257\1\13\1\36\1\127\1\13\1\127\1\13\1\205\1\13\1\205\1\143\1\13\1"+
    "\143\1\13\1\55\1\13\1\55\1\13\1\207\3\1\14\13\1\47\123\1\1\252\1\13\1\260"+
    "\1\261\1\262\1\263\1\264\1\265\1\266\1\145\1\267\1\145\24\1\55\13\1\107\2"+
    "\1\103\13\1\47\15\13\1\144\150\13\1\16\25\1\41\13\1\144\36\1");

  /* The ZZ_CMAP_A table has 2944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\3\1\2\22\0\1\4\1\0\1\17\1\6\3\0\1\15\1\24\1\25\1\7\1\35\1"+
    "\30\1\36\1\11\1\5\12\10\1\26\1\27\1\31\1\37\1\34\1\0\1\62\1\71\3\14\1\70\1"+
    "\14\1\100\1\75\2\14\1\72\1\33\1\14\1\32\1\77\1\64\1\14\1\76\1\63\1\74\1\73"+
    "\1\14\1\67\3\14\1\22\1\16\1\23\1\0\1\13\1\0\1\47\1\14\1\45\1\54\1\51\1\55"+
    "\1\57\1\14\1\40\1\14\1\61\1\50\1\65\1\41\1\42\1\53\1\14\1\46\1\56\1\44\1\43"+
    "\1\101\1\60\1\66\1\52\1\14\1\20\1\0\1\21\7\0\1\1\24\0\1\12\12\0\1\12\4\0\1"+
    "\12\5\0\27\12\1\0\12\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\2\0\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\23\12\1\0"+
    "\13\12\10\0\6\12\1\0\26\12\2\0\1\12\6\0\10\12\10\0\13\12\5\0\3\12\33\0\6\12"+
    "\1\0\1\12\17\0\2\12\7\0\2\12\12\0\3\12\2\0\2\12\1\0\16\12\15\0\11\12\13\0"+
    "\1\12\30\0\6\12\4\0\2\12\4\0\1\12\5\0\6\12\4\0\1\12\11\0\1\12\3\0\1\12\7\0"+
    "\11\12\7\0\5\12\17\0\26\12\3\0\1\12\2\0\1\12\7\0\11\12\4\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12\20\0\1\12\15\0\2\12\1\0\1\12"+
    "\5\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\17\0\4\12\1\0\1\12\3\0\3\12"+
    "\20\0\11\12\1\0\2\12\1\0\2\12\1\0\5\12\3\0\1\12\2\0\1\12\30\0\1\12\13\0\10"+
    "\12\2\0\1\12\3\0\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\3\0\3\12\3\0\14\12\13\0\10\12\1\0\2\12\10\0\3\12\5\0\4\12\1\0\5"+
    "\12\3\0\1\12\3\0\2\12\15\0\13\12\2\0\1\12\21\0\1\12\5\0\22\12\3\0\10\12\1"+
    "\0\11\12\1\0\1\12\2\0\7\12\11\0\1\12\1\0\2\12\15\0\2\12\1\0\1\12\2\0\2\12"+
    "\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1"+
    "\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0\1\12\25\0\14\12\1\0\24\12\13\0\5\12"+
    "\3\0\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0\1\12\1\0\6\12"+
    "\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12"+
    "\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16\12\2\0\6\12\2\0\15\12"+
    "\2\0\1\12\1\0\10\12\7\0\15\12\1\0\6\12\23\0\1\12\4\0\1\12\3\0\11\12\1\0\1"+
    "\12\5\0\17\12\1\0\16\12\2\0\14\12\13\0\1\12\15\0\7\12\7\0\16\12\15\0\2\12"+
    "\11\0\4\12\1\0\4\12\3\0\2\12\11\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\6\12"+
    "\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\14\0\2\1\7\0\1\12\15"+
    "\0\1\12\2\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1"+
    "\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\4\0\2\12\13\0\5\12\6"+
    "\0\4\12\3\0\2\12\14\0\10\12\7\0\10\12\1\0\7\12\6\0\2\12\12\0\5\12\5\0\2\12"+
    "\3\0\7\12\6\0\3\12\12\0\2\12\13\0\11\12\2\0\27\12\2\0\7\12\1\0\3\12\1\0\4"+
    "\12\1\0\4\12\2\0\6\12\3\0\1\12\1\0\1\12\2\0\5\12\1\0\12\12\12\0\5\12\1\0\3"+
    "\12\1\0\10\12\4\0\7\12\3\0\1\12\3\0\2\12\1\0\1\12\3\0\2\12\2\0\5\12\2\0\1"+
    "\12\1\0\1\12\30\0\3\12\3\0\6\12\2\0\6\12\2\0\6\12\11\0\7\12\4\0\5\12\3\0\5"+
    "\12\5\0\1\12\1\0\10\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\12\12\6\0\12"+
    "\12\2\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\14\12\1\0\16\12\1\0\2\12\1\0\2"+
    "\12\1\0\10\12\6\0\4\12\4\0\16\12\2\0\1\12\1\0\14\12\1\0\2\12\3\0\1\12\2\0"+
    "\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1\0\3\12\1\0\12\12\3\0\1\12\12\0\4\12\25"+
    "\0\1\12\1\0\1\12\3\0\7\12\1\0\1\12\1\0\4\12\1\0\17\12\1\0\2\12\14\0\3\12\4"+
    "\0\2\12\1\0\1\12\20\0\4\12\10\0\1\12\13\0\10\12\5\0\3\12\2\0\1\12\2\0\2\12"+
    "\2\0\4\12\1\0\14\12\1\0\1\12\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12"+
    "\1\0\14\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\14\12\2\0\10\12\1\0\2\12\1\0\1\12"+
    "\2\0\1\12\1\0\12\12\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1"+
    "\0\1\12\1\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12\1\0"+
    "\12\12\1\0\5\12\1\0\3\12\1\0\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\12\7\1\1\2\7\1\0\1\5\1\0\1\26\4\0"+
    "\1\27\1\30\2\7\1\31\20\7\1\0\2\7\2\0"+
    "\2\7\1\32\1\33\6\7\1\34\10\7\1\0\2\7"+
    "\1\35\1\36\4\7\1\37\10\7\1\40\2\7\1\41"+
    "\1\0\20\7\1\0\3\7\1\42\7\7\1\43\3\7"+
    "\1\44\1\0\5\7\1\45\6\7\1\46\1\47\1\0"+
    "\2\7\1\50\4\7\1\51\3\7\1\0\5\7\1\52"+
    "\2\7\1\53\1\0\1\7\1\54\1\7\1\55\3\7"+
    "\1\0\1\7\1\56\2\7\1\57\1\7\1\0\1\60"+
    "\3\7\1\0\1\7\1\61\1\62\1\0\1\7\1\0"+
    "\1\7\1\63\2\7\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\102\0\u014a\0\102"+
    "\0\u018c\0\u01ce\0\u0210\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\u0252\0\102\0\102\0\u0294"+
    "\0\102\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462"+
    "\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672"+
    "\0\u01ce\0\102\0\u06b4\0\u0210\0\u06f6\0\u0738\0\102\0\u018c"+
    "\0\u077a\0\u07bc\0\u018c\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u018c\0\u018c\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u018c\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\102\0\102"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u018c\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u018c\0\u1566\0\u15a8"+
    "\0\u018c\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986"+
    "\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u018c\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u1de8\0\u018c\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32"+
    "\0\u1f74\0\u018c\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u018c\0\u018c\0\u2142\0\u2184\0\u21c6\0\u018c\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u018c\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418"+
    "\0\u245a\0\u249c\0\u24de\0\u2520\0\u018c\0\u2562\0\u25a4\0\u018c"+
    "\0\u25e6\0\u2628\0\u018c\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772"+
    "\0\u27b4\0\u27f6\0\u018c\0\u2838\0\u287a\0\u018c\0\u28bc\0\u28fe"+
    "\0\u018c\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u018c\0\u018c"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\102\0\u2b92\0\u2bd4\0\u018c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\11\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\11"+
    "\1\26\1\27\1\30\1\31\1\32\1\11\1\33\1\34"+
    "\1\35\1\36\1\11\1\37\1\11\1\40\1\11\1\41"+
    "\2\11\1\42\1\11\1\43\1\11\1\44\1\45\3\11"+
    "\1\46\12\11\104\0\3\3\102\0\1\5\1\0\1\47"+
    "\72\0\2\5\1\0\77\5\10\0\1\7\1\50\100\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\22\11\1\0"+
    "\17\11\15\51\1\52\1\53\63\51\16\54\1\55\1\52"+
    "\62\54\32\0\1\56\103\0\1\57\55\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\1\11\1\60\12\11\1\61"+
    "\5\11\1\0\2\11\1\62\14\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\1\11\1\63\1\11\1\64"+
    "\11\11\1\65\4\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\1\11\1\66\20\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\6\11\1\67\3\11\1\70\7\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\2\11\1\71"+
    "\3\11\1\72\4\11\1\73\6\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\3\11\1\74"+
    "\1\11\1\75\14\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\1\11\1\76\20\11\1\0"+
    "\3\11\1\77\13\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\2\11\1\100\4\11\1\101\12\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\4\11\1\102\15\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\11\11\1\103\10\11\1\0"+
    "\17\11\63\0\1\104\26\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\22\11\1\0\11\11\1\105\5\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\22\11\1\0"+
    "\5\11\1\106\11\11\7\47\1\107\72\47\10\0\1\50"+
    "\71\0\1\51\3\0\76\51\1\54\3\0\76\54\33\0"+
    "\1\110\56\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\11\11\1\111\10\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\13\11\1\112\6\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\4\11\1\113\15\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\15\11\1\114\4\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\11\11\1\115\10\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\3\11\1\116\16\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\13\11\1\117\6\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\1\11\1\120\20\11\1\0"+
    "\2\11\1\121\14\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\1\122\21\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\11\11\1\123\10\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\4\11\1\124\15\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\5\11\1\125\14\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\5\11\1\126\14\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\4\11\1\127\15\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\6\11\1\130\13\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\5\11\1\131\14\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\6\11\1\132\13\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\7\11\1\133\12\11"+
    "\1\0\17\11\43\0\1\134\46\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\22\11\1\0\13\11\1\135\3\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\22\11"+
    "\1\0\6\11\1\136\10\11\5\47\1\137\1\47\1\107"+
    "\72\47\34\0\1\140\55\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\1\11\1\141\20\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\2\11\1\142"+
    "\17\11\1\0\17\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\1\11\1\143\20\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\16\11\1\144"+
    "\3\11\1\0\17\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\11\11\1\145\10\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\1\11\1\146"+
    "\13\11\1\147\4\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\13\11\1\150\6\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\4\11\1\151\15\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\2\11\1\152\17\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\11\11\1\153\10\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\6\11\1\154\13\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\11\11\1\155\10\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\4\11\1\156\15\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\21\11\1\157\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\2\11\1\160\17\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\21\11"+
    "\1\161\1\0\17\11\53\0\1\162\36\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\22\11\1\0\14\11\1\163"+
    "\2\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\22\11\1\0\7\11\1\164\7\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\4\11\1\165\15\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\6\11\1\166\13\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\5\11\1\167\14\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\4\11\1\170\15\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\11\11\1\171\10\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\1\172\21\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\2\11\1\173\17\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\1\174"+
    "\21\11\1\0\17\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\5\11\1\175\14\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\16\11\1\176"+
    "\3\11\1\0\17\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\12\11\1\177\7\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\1\11\1\200"+
    "\20\11\1\0\17\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\7\11\1\201\12\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\1\11\1\202"+
    "\20\11\1\0\17\11\53\0\1\203\36\0\1\11\2\0"+
    "\2\11\15\0\1\204\1\11\4\0\22\11\1\0\17\11"+
    "\10\0\1\11\2\0\1\205\1\11\15\0\2\11\4\0"+
    "\22\11\1\0\17\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\1\206\21\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\4\11\1\207\15\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\6\11\1\210\13\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\10\11\1\211\11\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\5\11\1\212\14\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\17\11\1\213\2\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\1\11\1\214\20\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\5\11\1\215\14\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\2\11\1\216\17\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\16\11\1\217\3\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\13\11\1\220\6\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\14\11\1\221\5\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\17\11\1\222\2\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\17\11\1\223\2\11"+
    "\1\0\17\11\46\0\1\224\43\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\22\11\1\0\15\11\1\225\1\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\22\11"+
    "\1\0\6\11\1\226\10\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\4\11\1\227\15\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\12\11"+
    "\1\230\7\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\11\11\1\231\10\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\4\11"+
    "\1\232\15\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\3\11\1\233\16\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\11\11"+
    "\1\234\10\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\7\11\1\235\12\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\1\11"+
    "\1\236\20\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\5\11\1\237\14\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\4\11"+
    "\1\240\15\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\16\11\1\241\3\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\11\11"+
    "\1\242\10\11\1\0\17\11\51\0\1\243\40\0\1\11"+
    "\2\0\1\244\1\11\15\0\2\11\4\0\22\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\22\11\1\0\10\11\1\245\6\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\12\11\1\246\7\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\13\11\1\247\6\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\22\11\1\0\16\11\1\250"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\6\11"+
    "\1\251\13\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\1\11\1\252\20\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\10\11"+
    "\1\253\11\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\1\11\1\254\20\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\2\11"+
    "\1\255\17\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\11\11\1\256\10\11\1\0\17\11"+
    "\56\0\1\257\33\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\22\11\1\0\6\11\1\260\10\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\22\11\1\0\11\11"+
    "\1\261\5\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\4\11\1\262\15\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\11\11\1\263\10\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\7\11\1\264\12\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\4\11\1\265\15\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\11\11\1\266\10\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\1\11\1\267\20\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\14\11\1\270\5\11\1\0\17\11\56\0\1\271"+
    "\33\0\1\11\2\0\2\11\15\0\2\11\4\0\22\11"+
    "\1\0\10\11\1\272\6\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\22\11\1\0\12\11\1\273\4\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\11\11"+
    "\1\274\10\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\10\11\1\275\11\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\4\11"+
    "\1\276\15\11\1\0\17\11\10\0\1\11\2\0\2\11"+
    "\15\0\2\11\4\0\5\11\1\277\14\11\1\0\17\11"+
    "\10\0\1\11\2\0\2\11\15\0\2\11\4\0\4\11"+
    "\1\300\15\11\1\0\17\11\64\0\1\301\25\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\22\11\1\0\11\11"+
    "\1\302\5\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\14\11\1\303\5\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\6\11\1\304\13\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\1\305\21\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\4\11\1\306\15\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\6\11\1\307\13\11\1\0\17\11\42\0\1\310\47\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\22\11\1\0"+
    "\12\11\1\311\4\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\11\11\1\312\10\11\1\0\17\11\10\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\2\11\1\313"+
    "\17\11\1\0\17\11\10\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\2\11\1\314\17\11\1\0\17\11\50\0"+
    "\1\315\41\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\10\11\1\316\11\11\1\0\17\11\10\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\1\11\1\317\20\11\1\0"+
    "\17\11\10\0\1\11\2\0\2\11\15\0\2\11\4\0"+
    "\10\11\1\320\11\11\1\0\17\11\40\0\1\321\51\0"+
    "\1\11\2\0\2\11\15\0\2\11\4\0\7\11\1\322"+
    "\12\11\1\0\17\11\45\0\1\323\44\0\1\11\2\0"+
    "\2\11\15\0\2\11\4\0\4\11\1\324\15\11\1\0"+
    "\17\11\52\0\1\325\37\0\1\11\2\0\2\11\15\0"+
    "\2\11\4\0\1\326\21\11\1\0\17\11\10\0\1\11"+
    "\2\0\2\11\15\0\2\11\4\0\2\11\1\327\17\11"+
    "\1\0\17\11\10\0\1\11\2\0\2\11\15\0\2\11"+
    "\4\0\1\11\1\330\20\11\1\0\17\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11286];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\3\1\11\11"+
    "\1\1\2\11\1\1\1\11\15\1\1\0\1\1\1\0"+
    "\1\11\4\0\1\11\24\1\1\0\2\1\2\0\23\1"+
    "\1\0\2\1\2\11\21\1\1\0\20\1\1\0\20\1"+
    "\1\0\16\1\1\0\13\1\1\0\11\1\1\0\7\1"+
    "\1\0\6\1\1\0\4\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public MSALexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MSALexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 53: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 54: break;
          case 3: 
            { return SINGLE_LINE_COMMENT;
            }
          case 55: break;
          case 4: 
            { return ASTERIX;
            }
          case 56: break;
          case 5: 
            { return NUMBER;
            }
          case 57: break;
          case 6: 
            { return DOT;
            }
          case 58: break;
          case 7: 
            { return ID;
            }
          case 59: break;
          case 8: 
            { return LBRACE;
            }
          case 60: break;
          case 9: 
            { return RBRACE;
            }
          case 61: break;
          case 10: 
            { return LBRACK;
            }
          case 62: break;
          case 11: 
            { return RBRACK;
            }
          case 63: break;
          case 12: 
            { return LPAREN;
            }
          case 64: break;
          case 13: 
            { return RPAREN;
            }
          case 65: break;
          case 14: 
            { return COLON;
            }
          case 66: break;
          case 15: 
            { return SEMICOLON;
            }
          case 67: break;
          case 16: 
            { return COMMA;
            }
          case 68: break;
          case 17: 
            { return LESS;
            }
          case 69: break;
          case 18: 
            { return GREATER;
            }
          case 70: break;
          case 19: 
            { return PLUS;
            }
          case 71: break;
          case 20: 
            { return MINUS;
            }
          case 72: break;
          case 21: 
            { return EQUAL;
            }
          case 73: break;
          case 22: 
            { return STRING;
            }
          case 74: break;
          case 23: 
            { return ARROW;
            }
          case 75: break;
          case 24: 
            { return IN;
            }
          case 76: break;
          case 25: 
            { return ON;
            }
          case 77: break;
          case 26: 
            { return OUT;
            }
          case 78: break;
          case 27: 
            { return OFF;
            }
          case 79: break;
          case 28: 
            { return CPE;
            }
          case 80: break;
          case 29: 
            { return MULTI_LINE_COMMENT;
            }
          case 81: break;
          case 30: 
            { return SEMICOLON_SYNTHETIC;
            }
          case 82: break;
          case 31: 
            { return TYPE;
            }
          case 83: break;
          case 32: 
            { return PORT;
            }
          case 84: break;
          case 33: 
            { return WEAK;
            }
          case 85: break;
          case 34: 
            { return IMPORT;
            }
          case 86: break;
          case 35: 
            { return ACCESS;
            }
          case 87: break;
          case 36: 
            { return STRONG;
            }
          case 88: break;
          case 37: 
            { return CONNECT;
            }
          case 89: break;
          case 38: 
            { return EXTENDS;
            }
          case 90: break;
          case 39: 
            { return PACKAGE;
            }
          case 91: break;
          case 40: 
            { return IDENTITY;
            }
          case 92: break;
          case 41: 
            { return CRITICAL;
            }
          case 93: break;
          case 42: 
            { return COMPONENT;
            }
          case 94: break;
          case 43: 
            { return ENCRYPTED;
            }
          case 95: break;
          case 44: 
            { return WEAK_AUTH;
            }
          case 96: break;
          case 45: 
            { return TRUSTLEVEL;
            }
          case 97: break;
          case 46: 
            { return UNENCRYPTED;
            }
          case 98: break;
          case 47: 
            { return AUTOCONNECT;
            }
          case 99: break;
          case 48: 
            { return STRONG_AUTH;
            }
          case 100: break;
          case 49: 
            { return CONFIGURATION;
            }
          case 101: break;
          case 50: 
            { return ACCESSCONTROL;
            }
          case 102: break;
          case 51: 
            { return SUPPRESS_POLICY_TOKEN;
            }
          case 103: break;
          case 52: 
            { return TRUSTLEVELRELATION;
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
