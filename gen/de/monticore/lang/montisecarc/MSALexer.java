/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package de.monticore.lang.montisecarc;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.monticore.lang.montisecarc.psi.MSATokenElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>MSALexer.flex</tt>
 */
public class MSALexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\3\1\2\22\0\1\4\1\0\1\15\1\6\3\0\1\13\1\22\1\23\1\7\1\33\1"+
    "\26\1\34\1\11\1\5\12\10\1\24\1\25\1\27\1\35\1\32\1\0\1\63\5\12\1\62\5\12\1"+
    "\31\1\12\1\30\1\12\1\61\2\12\1\60\7\12\1\20\1\14\1\21\1\0\1\12\1\0\1\45\1"+
    "\12\1\43\1\52\1\47\1\53\1\55\1\12\1\36\1\12\1\57\1\46\1\64\1\37\1\40\1\51"+
    "\1\12\1\44\1\54\1\42\1\41\1\66\1\56\1\65\1\50\1\12\1\16\1\0\1\17\7\0\1\1\242"+
    "\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\13\7\1\26\1\0\1\5\1\0\1\27\4\0\1\30"+
    "\1\31\2\7\1\32\22\7\2\0\2\7\1\33\1\34"+
    "\7\7\1\35\11\7\1\36\1\37\4\7\1\40\11\7"+
    "\1\41\2\7\1\42\22\7\1\43\10\7\1\44\3\7"+
    "\1\45\4\7\1\46\7\7\1\47\1\50\1\7\1\51"+
    "\4\7\1\52\10\7\1\53\3\7\1\54\2\7\1\55"+
    "\5\7\1\56\3\7\1\57\4\7\1\60\3\7\1\61"+
    "\1\62\2\7\1\63\3\7\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\67\0\u0113\0\67"+
    "\0\u014a\0\u0181\0\u01b8\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\u01ef\0\67\0\67\0\u0226"+
    "\0\67\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7"+
    "\0\u03de\0\u0415\0\u044c\0\u0483\0\67\0\u04ba\0\u04f1\0\u0181"+
    "\0\67\0\u0528\0\u01b8\0\u055f\0\u0596\0\67\0\u014a\0\u05cd"+
    "\0\u0604\0\u014a\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u014a\0\u014a\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u014a\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\67\0\67\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u014a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054"+
    "\0\u108b\0\u10c2\0\u10f9\0\u014a\0\u1130\0\u1167\0\u014a\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u014a\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u014a\0\u1810"+
    "\0\u1847\0\u187e\0\u18b5\0\u014a\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u014a\0\u014a\0\u1a6d\0\u014a\0\u1aa4"+
    "\0\u1adb\0\u1b12\0\u1b49\0\u014a\0\u1b80\0\u1bb7\0\u1bee\0\u1c25"+
    "\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u014a\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u014a\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\u014a\0\u1f95\0\u1fcc\0\u2003\0\u014a\0\u203a\0\u2071"+
    "\0\u20a8\0\u20df\0\u014a\0\u2116\0\u214d\0\u2184\0\u014a\0\u014a"+
    "\0\u21bb\0\u21f2\0\u014a\0\u2229\0\u2260\0\u2297\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\11\1\26\1\27"+
    "\1\30\1\31\1\32\1\11\1\33\1\34\1\35\1\36"+
    "\1\11\1\37\1\11\1\40\1\11\1\41\2\11\1\42"+
    "\1\11\1\43\1\11\1\44\2\11\1\45\3\11\71\0"+
    "\3\3\67\0\1\5\1\0\1\46\57\0\2\5\1\0"+
    "\64\5\10\0\1\7\1\47\65\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\25\11\1\0\3\11\13\50\1\51"+
    "\1\52\52\50\14\53\1\54\1\51\51\53\30\0\1\55"+
    "\70\0\1\56\44\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\1\11\1\57\12\11\1\60\10\11\1\0\1\61"+
    "\2\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\1\11\1\62\1\11\1\63\11\11\1\64\7\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\1\11\1\65\23\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\6\11\1\66\3\11\1\67"+
    "\12\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\2\11\1\70\3\11\1\71\1\11\1\72"+
    "\2\11\1\73\11\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\3\11\1\74\1\11\1\75"+
    "\17\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\1\11\1\76\23\11\1\0\1\11\1\77"+
    "\1\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\2\11\1\100\4\11\1\101\15\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\4\11\1\102"+
    "\20\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\11\11\1\103\13\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\3\11\1\104"+
    "\21\11\1\0\3\11\7\46\1\105\57\46\10\0\1\47"+
    "\56\0\1\50\3\0\63\50\1\53\3\0\63\53\31\0"+
    "\1\106\45\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\11\11\1\107\13\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\13\11\1\110\11\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\4\11\1\111\20\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\15\11\1\112\7\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\11\11\1\113\13\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\3\11\1\114\21\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\13\11\1\115\11\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\1\11\1\116\23\11\1\0"+
    "\1\117\2\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\1\120\24\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\11\11\1\121\13\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\11\11\1\122\13\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\4\11\1\123\20\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\5\11\1\124\17\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\5\11\1\125\17\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\4\11\1\126\20\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\6\11\1\127\16\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\5\11\1\130\17\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\6\11\1\131\16\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\7\11\1\132\15\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\13\11\1\133\11\11\1\0"+
    "\3\11\5\46\1\134\1\46\1\105\57\46\32\0\1\135"+
    "\44\0\1\11\1\0\1\11\15\0\2\11\4\0\1\11"+
    "\1\136\23\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\2\11\1\137\22\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\1\11"+
    "\1\140\23\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\16\11\1\141\6\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\11\11"+
    "\1\142\13\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\1\11\1\143\13\11\1\144\7\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\13\11\1\145\11\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\4\11\1\146\20\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\7\11\1\147\15\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\2\11\1\150\22\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\11\11\1\151\13\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\6\11\1\152\16\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\11\11\1\153\13\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\4\11\1\154\20\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\21\11\1\155\3\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\2\11\1\156\22\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\21\11\1\157\3\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\13\11\1\160\11\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\4\11\1\161\20\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\6\11\1\162\16\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\5\11\1\163\17\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\4\11\1\164\20\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\11\11\1\165\13\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\1\166\24\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\2\11\1\167\22\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\1\170\24\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\6\11"+
    "\1\171\16\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\5\11\1\172\17\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\16\11"+
    "\1\173\6\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\12\11\1\174\12\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\1\11"+
    "\1\175\23\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\7\11\1\176\15\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\1\11"+
    "\1\177\23\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\6\11\1\200\16\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\1\201"+
    "\24\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\4\11\1\202\20\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\6\11\1\203"+
    "\16\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\10\11\1\204\14\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\5\11\1\205"+
    "\17\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\17\11\1\206\5\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\1\11\1\207"+
    "\23\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\5\11\1\210\17\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\7\11\1\211"+
    "\15\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\2\11\1\212\22\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\16\11\1\213"+
    "\6\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\13\11\1\214\11\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\14\11\1\215"+
    "\10\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\17\11\1\216\5\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\17\11\1\217"+
    "\5\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\11\11\1\220\13\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\4\11\1\221"+
    "\20\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\12\11\1\222\12\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\11\11\1\223"+
    "\13\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\4\11\1\224\20\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\3\11\1\225"+
    "\21\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\11\11\1\226\13\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\7\11\1\227"+
    "\15\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\1\11\1\230\23\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\1\11\1\231"+
    "\23\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\5\11\1\232\17\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\4\11\1\233"+
    "\20\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\16\11\1\234\6\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\11\11\1\235"+
    "\13\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\16\11\1\236\6\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\12\11\1\237"+
    "\12\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\13\11\1\240\11\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\25\11\1\0"+
    "\2\11\1\241\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\6\11\1\242\16\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\1\11\1\243\23\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\10\11\1\244\14\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\5\11\1\245\17\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\1\11\1\246\23\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\2\11\1\247\22\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\11\11\1\250\13\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\16\11\1\251\6\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\4\11\1\252\20\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\11\11\1\253\13\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\7\11\1\254\15\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\4\11\1\255\20\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\11\11\1\256\13\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\11\11\1\257\13\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\1\11\1\260\23\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\14\11\1\261\10\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\23\11\1\262\1\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\11\11\1\263\13\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\10\11\1\264\14\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\4\11\1\265\20\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\24\11\1\266\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\5\11\1\267\17\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\4\11\1\270\20\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\2\11\1\271\22\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\14\11\1\272\10\11\1\0\3\11\10\0\1\11\1\0"+
    "\1\11\15\0\2\11\4\0\6\11\1\273\16\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\15\0\2\11\4\0"+
    "\1\274\24\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\2\11\1\275\22\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\4\11"+
    "\1\276\20\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\6\11\1\277\16\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\10\11"+
    "\1\300\14\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\11\11\1\301\13\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\2\11"+
    "\1\302\22\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\6\11\1\303\16\11\1\0\3\11"+
    "\10\0\1\11\1\0\1\11\15\0\2\11\4\0\2\11"+
    "\1\304\22\11\1\0\3\11\10\0\1\11\1\0\1\11"+
    "\15\0\2\11\4\0\1\305\24\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\10\11\1\306"+
    "\14\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\1\11\1\307\23\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\10\11\1\310"+
    "\14\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\5\11\1\311\17\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\7\11\1\312"+
    "\15\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\12\11\1\313\12\11\1\0\3\11\10\0"+
    "\1\11\1\0\1\11\15\0\2\11\4\0\4\11\1\314"+
    "\20\11\1\0\3\11\10\0\1\11\1\0\1\11\15\0"+
    "\2\11\4\0\1\315\24\11\1\0\3\11\10\0\1\11"+
    "\1\0\1\11\15\0\2\11\4\0\2\11\1\316\22\11"+
    "\1\0\3\11\10\0\1\11\1\0\1\11\15\0\2\11"+
    "\4\0\1\11\1\317\23\11\1\0\3\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8910];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\3\1\11\11"+
    "\1\1\2\11\1\1\1\11\13\1\1\11\1\0\1\1"+
    "\1\0\1\11\4\0\1\11\26\1\2\0\25\1\2\11"+
    "\162\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public MSALexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MSALexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 53: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 54: break;
          case 3: 
            { return SINGLE_LINE_COMMENT;
            }
          case 55: break;
          case 4: 
            { return ASTERIX;
            }
          case 56: break;
          case 5: 
            { return NUMBER;
            }
          case 57: break;
          case 6: 
            { return DOT;
            }
          case 58: break;
          case 7: 
            { return ID;
            }
          case 59: break;
          case 8: 
            { return LBRACE;
            }
          case 60: break;
          case 9: 
            { return RBRACE;
            }
          case 61: break;
          case 10: 
            { return LBRACK;
            }
          case 62: break;
          case 11: 
            { return RBRACK;
            }
          case 63: break;
          case 12: 
            { return LPAREN;
            }
          case 64: break;
          case 13: 
            { return RPAREN;
            }
          case 65: break;
          case 14: 
            { return COLON;
            }
          case 66: break;
          case 15: 
            { return SEMICOLON;
            }
          case 67: break;
          case 16: 
            { return COMMA;
            }
          case 68: break;
          case 17: 
            { return LESS;
            }
          case 69: break;
          case 18: 
            { return GREATER;
            }
          case 70: break;
          case 19: 
            { return PLUS;
            }
          case 71: break;
          case 20: 
            { return MINUS;
            }
          case 72: break;
          case 21: 
            { return EQUAL;
            }
          case 73: break;
          case 22: 
            { return AT;
            }
          case 74: break;
          case 23: 
            { return STRING;
            }
          case 75: break;
          case 24: 
            { return ARROW;
            }
          case 76: break;
          case 25: 
            { return IN;
            }
          case 77: break;
          case 26: 
            { return ON;
            }
          case 78: break;
          case 27: 
            { return OUT;
            }
          case 79: break;
          case 28: 
            { return OFF;
            }
          case 80: break;
          case 29: 
            { return CPE;
            }
          case 81: break;
          case 30: 
            { return MULTI_LINE_COMMENT;
            }
          case 82: break;
          case 31: 
            { return SEMICOLON_SYNTHETIC;
            }
          case 83: break;
          case 32: 
            { return TYPE;
            }
          case 84: break;
          case 33: 
            { return PORT;
            }
          case 85: break;
          case 34: 
            { return WEAK;
            }
          case 86: break;
          case 35: 
            { return IMPORT;
            }
          case 87: break;
          case 36: 
            { return ACCESS;
            }
          case 88: break;
          case 37: 
            { return STRONG;
            }
          case 89: break;
          case 38: 
            { return CONNECT;
            }
          case 90: break;
          case 39: 
            { return EXTENDS;
            }
          case 91: break;
          case 40: 
            { return PACKAGE;
            }
          case 92: break;
          case 41: 
            { return IDENTITY;
            }
          case 93: break;
          case 42: 
            { return CRITICAL;
            }
          case 94: break;
          case 43: 
            { return COMPONENT;
            }
          case 95: break;
          case 44: 
            { return ENCRYPTED;
            }
          case 96: break;
          case 45: 
            { return TRUSTLEVEL;
            }
          case 97: break;
          case 46: 
            { return UNENCRYPTED;
            }
          case 98: break;
          case 47: 
            { return AUTOCONNECT;
            }
          case 99: break;
          case 48: 
            { return CLEARANCEFOR;
            }
          case 100: break;
          case 49: 
            { return CONFIGURATION;
            }
          case 101: break;
          case 50: 
            { return ACCESSCONTROL;
            }
          case 102: break;
          case 51: 
            { return SUPPRESS_POLICY_TOKEN;
            }
          case 103: break;
          case 52: 
            { return TRUSTLEVELRELATION;
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
