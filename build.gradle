buildscript {

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }

    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.2.0-SNAPSHOT"
    }
}
apply plugin: "org.jetbrains.intellij"
group 'de.monticore.lang.montisecarc'

intellij {
    pluginName name
    version ideaVersion

    downloadSources Boolean.valueOf(downloadIdeaSources)
    updateSinceUntilBuild = false
    instrumentCode = false

    plugins = ['com.neueda4j.intellij.plugin.cypher:2.4.1', project(':GraphDatabase')]
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'jacoco'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
    main {
        java.srcDirs "gen", "src/java"
        kotlin.srcDirs "src/kotlin"
        resources.srcDir "resources"
    }
    test {
        kotlin.srcDirs "tests"
        resources.srcDirs "testData"
    }
}

test {
    jvmArgs '-ea', '-Xbootclasspath/p:../out/classes/production/boot', '-XX:+HeapDumpOnOutOfMemoryError', '-Xmx512m', '-XX:MaxPermSize=320m', '-Didea.system.path=../test-system', '-Didea.home.path=../', '-Didea.config.path=../test-config', '-Didea.test.group=ALL_EXCLUDE_DEFINED'
    
    testLogging {
        events 'skipped', 'failed'
        exceptionFormat = 'full'
    }

    beforeSuite { suite ->
        if (suite.className != null) {
            println()
            println(suite.className)
        }
    }
    afterTest { desc, result ->
        def c = '.'
        if (result.resultType == TestResult.ResultType.FAILURE) {
            c = 'X'
        } else if (result.resultType == TestResult.ResultType.SKIPPED) {
            c = 'S'
        }
        print(c)
        System.out.flush()
    }
    afterSuite { println() }
}

repositories {
    mavenCentral()
    jcenter()
}

project.afterEvaluate {

    def prepareSandboxTask = project.tasks.findByName("prepareSandbox")
    prepareSandboxTask.doLast {

        def libFiles = new File("$prepareSandboxTask.destinationDir/${project.name}/lib/")
        libFiles.listFiles().each {

            if(it.name.contains("kotlin")) {

                delete(it)
            }
        }
    }
}

dependencies {
    compile group: 'com.beust', name:'klaxon', version:'0.27'
    compile 'com.github.kittinunf.fuel:fuel:1.5.0' //for JVM
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.25-incubating'
    compile 'com.github.ben-manes.caffeine:caffeine:2.4.0'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['gen/**',
                                'graphdatabase/**',
                              'grammars/**'])
        })
    }
}

check.dependsOn jacocoTestReport

version = "$version"
